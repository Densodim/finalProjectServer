// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum QuestionType {
  text
  comment
  radiogroup
  checkbox
  email
  number
  file
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  name        String
  password    String
  role        UserRole   @default(USER)
  isActive    Boolean    @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  form        Form[]
  responses   Response[]
  adminLog    AdminLog[]
}

model AdminLog {
  id        Int      @id @default(autoincrement())
  action    String
  details   String
  admin     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   Int
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
}

model Response {
  id          Int      @id @default(autoincrement())
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      Int
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  email       String?
  submittedAt DateTime @default(now())
  ipAdress    String?
  userAgent   String?
  answer      Answer[]
  isSpam      Boolean  @default(false)
}

model Form {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  isPublished Boolean       @default(false)
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id])
  authorId    Int
  questions   Question[]
  responses   Response[]
  settings    FormSettings?
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int?
  tags        Tag[]
}

model FormSettings {
  id               Int       @id @default(autoincrement())
  allowResponses   Boolean   @default(true)
  collectEmails    Boolean   @default(false)
  limitResponses   Int?
  responseDeadLine DateTime?
  requireLogin     Boolean   @default(false)
  allowFileUpload  Boolean   @default(false)
  maxFileSize      Int?
  allowedFileTypes String[]
  form             Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId           Int       @unique
}

model Question {
  id          Int                 @id @default(autoincrement())
  title       String
  desctiption String?
  type        QuestionType
  isRequired  Boolean             @default(false)
  order       Int
  form        Form                @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      Int
  options     Option[]
  answers     Answer[]
  validation  QuestionValidation?
}

model Option {
  id         Int      @id @default(autoincrement())
  text       String
  order      Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  answer     Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId Int
  textAnswer String?
  option     Option?  @relation(fields: [optionId], references: [id])
  optionId   Int?
  fileUrl    String?
  createdAt  DateTime @default(now())
}

model QuestionValidation {
  id            Int      @id @default(autoincrement())
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    Int      @unique
  minLength     Int?
  maxLength     Int?
  pattern       String?
  minValue      Int?
  maxValue      Int?
  customMessage String?
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  forms     Form[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  forms       Form[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
